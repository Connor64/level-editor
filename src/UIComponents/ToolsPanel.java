package UIComponents;

import Content.Tileset;
import Core.EditorConstants;
import Core.EditorWindow;
import Core.EditorConstants.EditorMode;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.*;
import java.util.ArrayList;

/**
 * A JPanel which contains controls for the level editor and all tilesets' sprites.
 */
public class ToolsPanel extends JPanel {
    private JButton selectButton, drawButton, eraseButton;
    private JPanel tilesetPanel;
    private JComboBox<Tileset> tilesetDropdown;

    /** The file chooser used to select images to generate tilesets from*/
    private final JFileChooser fileChooser;

    /** A list of all tilesets generated by the user. */
    private ArrayList<Tileset> tilesets;

    /** The index of the currently selected tileset. */
    private int currentTileset;

    private final EditorWindow EDITOR;

    /**
     * Instantiates a tool panel object and sets up all of its components.
     */
    public ToolsPanel(EditorWindow editor) {
        EDITOR = editor;

        setLayout(new GridBagLayout());
        tilesets = new ArrayList<>();
        currentTileset = -1; // Indicates there is no tileset

        // Make the file chooser only accept .png and .bmp files.
        fileChooser = new JFileChooser();
        fileChooser.setAcceptAllFileFilterUsed(false);
        FileNameExtensionFilter filter = new FileNameExtensionFilter(
                "Image Files (*.png, *.bmp)", "png", "bmp"
        );
        fileChooser.setFileFilter(filter);

        tilesetPanel = new JPanel();

        tilesetDropdown = new JComboBox<>(); // TODO: Make it so dropdown is populated when loading from file
        tilesetDropdown.setBackground(EditorConstants.BUTTON_COLOR);
        tilesetDropdown.setAlignmentX(Component.CENTER_ALIGNMENT);
        tilesetDropdown.addActionListener(e -> {
            setTileset(tilesetDropdown.getSelectedIndex());
        });

        selectButton = new JButton("Select");
        selectButton.setBackground(EditorConstants.BUTTON_COLOR);
        selectButton.addActionListener(e -> {
            selectButton.setBackground(EditorConstants.TOGGLE_COLOR);
            drawButton.setBackground(EditorConstants.BUTTON_COLOR);
            eraseButton.setBackground(EditorConstants.BUTTON_COLOR);
            EDITOR.mode = EditorMode.SELECT;
        });

        drawButton = new JButton("Draw");
        drawButton.setBackground(EditorConstants.BUTTON_COLOR);
        drawButton.addActionListener(e -> {
            selectButton.setBackground(EditorConstants.BUTTON_COLOR);
            drawButton.setBackground(EditorConstants.TOGGLE_COLOR);
            eraseButton.setBackground(EditorConstants.BUTTON_COLOR);
            EDITOR.mode = EditorMode.DRAW;
        });

        eraseButton = new JButton("Erase");
        eraseButton.setBackground(EditorConstants.BUTTON_COLOR);
        eraseButton.addActionListener(e -> {
            selectButton.setBackground(EditorConstants.BUTTON_COLOR);
            drawButton.setBackground(EditorConstants.BUTTON_COLOR);
            eraseButton.setBackground(EditorConstants.TOGGLE_COLOR);
            EDITOR.mode = EditorMode.ERASE;
        });

        GridBagConstraints gc = new GridBagConstraints();
        gc.gridx = 0;
        gc.gridy = 0;
        add(selectButton, gc);

        gc.gridx = 1;
        add(drawButton, gc);

        gc.gridx = 2;
        add(eraseButton, gc);

        gc.gridx = 0;
        gc.gridy = 1;
        gc.weighty = 1.0;
        gc.gridwidth = 3;
        gc.fill = GridBagConstraints.BOTH;
        add(tilesetPanel, gc);

        gc.gridx = 1;
        gc.gridy = 2;
        gc.weightx = 1.0;
        gc.weighty = 0.1;
        gc.gridwidth = 1;
        gc.fill = GridBagConstraints.NONE;
        add(tilesetDropdown, gc);
    }

    /**
     * Generates a new tileset from a user-specified file. Splices sprites from the image at a specified interval.
     *
     * @throws IOException Thrown if the image is unable to be read from the user-specified file.
     */
    public void createNewTileset() throws IOException {
        int returnVal = fileChooser.showOpenDialog(getParent());
        if (returnVal != JFileChooser.APPROVE_OPTION) return;

        // Read the file as an image
        File file = fileChooser.getSelectedFile();
        BufferedImage image = ImageIO.read(file);

//        int tileSize = getValidTileSize(image); // Get valid user input for the size of each tile.
//
//        if (tileSize == -1) return; // If the user quits the prompt, end the import process.

        // Add the new tileset to the arraylist of tilesets
//        addTileset(new Tileset(tileSize, image, "tilesets.size()"));
        Tileset tileset = generateValidTileset(image);
        if (tileset == null) return;

        addTileset(tileset);
        currentTileset = tilesets.size() - 1;
    }

    /**
     * Requests a valid tile size from the user based on the input image.
     *
     * @param image The BufferedImage object read from the user-specified file.
     * @return The size of each tile from the tileset. Is -1 if the user cancels.
     */
    private Tileset generateValidTileset(BufferedImage image) {

        // Create panel which will contain content for the JOptionPane
        JPanel importPanel = new JPanel();
        importPanel.setLayout(new GridBagLayout());
        GridBagConstraints gc = new GridBagConstraints();

        // Create elements which will populate the JOptionPane
        JLabel imagePreview = new JLabel(new ImageIcon(image));
        JLabel imageSize = new JLabel(image.getWidth() + " x " + image.getHeight());
        imageSize.setBorder(new EmptyBorder(0, 0, 15, 0));
        JLabel sizeInstruction = new JLabel("Specify tile size:");
        JTextField sizeField = new JTextField(4);
        sizeField.setHorizontalAlignment(JTextField.CENTER);
        JLabel nameInstruction = new JLabel("Enter a name for the tileset:");
        nameInstruction.setToolTipText("This will be used to identify the tileset from the asset manager in the game.");
        JTextField nameField = new JTextField(10);

        Component[] components = {
                imagePreview, imageSize,
                sizeInstruction, sizeField,
                nameInstruction, nameField,
        };

        // Add elements to the panel vertically
        gc.gridx = 0;
        for (int i = 0; i < components.length; i++) {
            gc.gridy = i;
            importPanel.add(components[i], gc);
        }

        // Loop over the user input prompt until valid input is received or user quits
        int tileSize;
        int val = 0;
        while (true) {

            // If any previous input was invalid
            if (val == -1) {
                JOptionPane.showMessageDialog(null,
                        "Input must be a multiple of height and width.",
                        "Invalid Input!", JOptionPane.ERROR_MESSAGE
                );
            }

            // Prompt the user for a tile size
            int decision = JOptionPane.showConfirmDialog(
                    null,
                    importPanel,
                    "Choose a tile size",
                    JOptionPane.OK_CANCEL_OPTION,
                    JOptionPane.PLAIN_MESSAGE
            );

            // If the user exits the window, quit the import process.
            if (decision != JOptionPane.OK_OPTION) return null;

            // Try to parse the tile size from user input.
            val = -1;
            try {
                val = Integer.parseInt(sizeField.getText());
            } catch (NumberFormatException ignored) {}

            boolean isMultiple = (((image.getWidth() % val) != 0) && ((image.getHeight() % val) != 0));

            // If the input is invalid, loop back to the input prompt
            if ((val == -1) || isMultiple || nameField.getText().trim().isEmpty()) {
                val = -1;
                sizeField.setText("");
                continue;
            }

            // If reached, a valid input was found.
            tileSize = val;
            break;
        }

        return new Tileset(tileSize, image, nameField.getText().trim());
    }

    public Tileset getCurrentTileset() {
        if (currentTileset < 0) return null;

        return tilesets.get(currentTileset);
    }

    private void setTileset(int index) {
        currentTileset = Math.max(Math.min(index, tilesets.size()), 0);
        tilesetPanel.removeAll();
        tilesetPanel.add(tilesets.get(index));
        revalidate();
        repaint();
    }

    public void addTileset(Tileset tileset) {
        if (!tilesets.contains(tileset)) {
            tilesets.add(tileset);
            tilesetDropdown.addItem(tileset);
            tilesetDropdown.setSelectedIndex(tilesetDropdown.getItemCount() - 1);
        }

        setTileset(tilesets.size() - 1);
    }
}